name: Complete CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Frontend tests
  frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Type check
      run: npx tsc --noEmit
      
    - name: Build application
      run: npm run build
      
    - name: Test build output
      run: |
        if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
          echo "❌ Build validation failed"
          exit 1
        fi
        echo "✅ Frontend build successful"

  # Backend tests
  backend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Run backend tests
      run: |
        cd backend
        npm test
      env:
        NODE_ENV: test
        
    - name: Start backend and test health
      run: |
        cd backend
        npm start &
        sleep 10
        curl -f http://localhost:3001/api/health || exit 1
        echo "✅ Backend health check passed"

  # Docker integration tests
  docker:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build and test Docker images
      run: |
        # Build images
        docker build -f Dockerfile.frontend -t todo-frontend:test .
        docker build -f backend/Dockerfile -t todo-backend:test ./backend
        
        # Test frontend container
        docker run -d --name frontend-test -p 3000:80 todo-frontend:test
        sleep 15
        
        # Wait for nginx to start and test
        for i in {1..30}; do
          if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "✅ Frontend container test passed"
            break
          fi
          echo "Waiting for frontend... ($i/30)"
          sleep 2
        done
        
        curl -f http://localhost:3000 || exit 1
        docker stop frontend-test && docker rm frontend-test
        
        # Test backend container
        docker run -d --name backend-test -p 3001:3001 \
          -e NODE_ENV=test \
          todo-backend:test
        sleep 15
        curl -f http://localhost:3001/api/health || exit 1
        docker stop backend-test && docker rm backend-test
        
        echo "✅ Docker integration tests passed"

  # Security scan
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        
    - name: Run security audit
      run: |
        npm audit --audit-level=moderate || echo "Audit completed with findings"
        cd backend && npm audit --audit-level=moderate || echo "Backend audit completed with findings"

  # End-to-end tests
  e2e:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        
    - name: Build and start services
      run: |
        npm run build
        cd backend && npm start &
        npm run preview &
        sleep 20
        
    - name: Run basic E2E tests
      run: |
        # Test services are running
        curl -f http://localhost:3001/api/health || exit 1
        curl -f http://localhost:4173 || exit 1
        
        # Test API endpoints
        curl -f http://localhost:3001/api/tasks
        curl -f http://localhost:3001/api/reminders
        
        echo "✅ E2E tests passed"

  # Summary
  ci-summary:
    runs-on: ubuntu-latest
    needs: [frontend, backend, docker, security, e2e]
    if: always()
    
    steps:
    - name: CI Summary
      run: |
        echo "## 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ${{ needs.frontend.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend | ${{ needs.backend.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker | ${{ needs.docker.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.frontend.result }}" == "success" && "${{ needs.backend.result }}" == "success" && "${{ needs.docker.result }}" == "success" && "${{ needs.e2e.result }}" == "success" ]]; then
          echo "### 🎉 All tests passed! The application is ready for deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ⚠️ Some tests failed. Please review the logs and fix the issues." >> $GITHUB_STEP_SUMMARY
        fi